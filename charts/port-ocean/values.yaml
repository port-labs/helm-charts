nameOverride: ""
fullnameOverride: ""
metadataNamePrefixOverride: ""

port:
  clientId: ""
  clientSecret: ""

  baseUrl: https://api.getport.io
  ingestUrl: https://ingest.getport.io

podAnnotations: { }

podServiceAccount:
  create: false
  name: null
  annotations: { }

extraEnv:
# Example
#   - name: HTTPS_PROXY
#     value: http://myproxy.com

podSecurityContext: { }
# Example
# runAsGroup: 1001
# runAsUser: 1001
# fsGroup: 1001
# fsGroupChangePolicy: "OnRootMismatch"
containerSecurityContext: { }
# Example
# runAsGroup: 1001
# runAsUser: 1001
# allowPrivilegeEscalation: false

extraInitContainers: [ ]

extraVolumes: [ ]

extraVolumeMounts: [ ]

workload:
  kind: "Deployment" # Deployment, CronJob

  deployment:
    rolloutStrategy: "Recreate"
    replicas: 1 # Currently only allows 1 or 0 replicas

  cron:
    # number of minutes to wait before cancelling the resync
    resyncTimeoutMinutes: null
    resyncOnInstall: true
    resyncOnUpgrade: true
    suspend: false
    kubectlImage: bitnamisecure/kubectl:latest

resources:
  requests:
    memory: "512Mi"
    cpu: "200m"
  limits:
    memory: "1024Mi"
    cpu: "500m"

nodeSelector: { }

tolerations: [ ]

affinity: { }

extraLabels: { }

imageRegistry: "ghcr.io/port-labs"

imagePullPolicy: Always

imagePullSecrets: [ ]

initializePortResources: true

allowEnvironmentVariablesJqAccess: true

scheduledResyncInterval: null
# Example
#  scheduledResyncInterval: 60 # minutes - Used for Deployment workload.kind
#  scheduledResyncInterval: "*/60 * * * *" # cron expression - Used for CronJob workload.kind

scheduleConcurrencyPolicy: "Replace"

terminationGracePeriodSeconds: 30

clientTimeout: null

sendRawDataExamples: true

secret:
  create: true
  name: ""
  #  name:
  #    - "x"
  #    - "y"
  #    - "c"

service:
  enabled: true
  type: ClusterIP
  port: 8000
  annotations: { }

ingress:
  enabled: false
  className: ""
  annotations: { }
  host: null
  path: /
  pathType: Prefix
  tls: [ ]
  # Example
  #   - secretName: my-secret
  #     hosts:
  #       - "my-host.my-domain.com"

integration:
  identifier: ""
  version: ""
  type: ""
  config: { }
  secrets: { }
  extraConfig: { }
  processExecution:
    mode: "multi_process"
    prometheusMultiProcessDir: "/tmp/ocean/prometheus/metrics"
  oauth:
    enabled: false
    access_token_file_path: "/app/.config/oauth_token"
  eventListener:
    type: "KAFKA"
    brokers: "b-1-public.publicclusterprod.t9rw6w.c1.kafka.eu-west-1.amazonaws.com:9196,b-2-public.publicclusterprod.t9rw6w.c1.kafka.eu-west-1.amazonaws.com:9196,b-3-public.publicclusterprod.t9rw6w.c1.kafka.eu-west-1.amazonaws.com:9196"

selfSignedCertificate:
  enabled: false
  certificate: ""
  secret:
    name: ""
    key: crt
    useExistingSecret: false

liveEvents:
  baseUrl: ""
  worker:
    enabled: false
    replicaCount: 1
    initializePortResources: false
    resources:
      requests:
        memory: "512Mi"
        cpu: "200m"
      limits:
        memory: "1024Mi"
        cpu: "500m"
  deployment:
    rolloutStrategy:
      type: RollingUpdate
      maxSurge: 25%
      maxUnavailable: 25%
  service:
    enabled: true
    type: ClusterIP
    port: 8000
    annotations: { }
  ingress:
    enabled: false
    className: ""
    annotations: { }
    host: null
    path: /
    pathType: Prefix
    tls: [ ]
    # Example
    #   - secretName: my-secret
    #     hosts:
    #       - "my-host.my-domain.com"
  extraLabels: { }
  extraConfig: { }

livenessProbe:
  enabled: true
#  initialDelaySeconds: 30
#  periodSeconds: 10
#  timeoutSeconds: 5
#  failureThreshold: 3

readinessProbe:
  enabled: true
#  initialDelaySeconds: 30
#  periodSeconds: 10
#  timeoutSeconds: 5
#  failureThreshold: 3
#  successThreshold: 2

postgresql:
  enabled: false

  image:
    registry: docker.io
    repository: bitnamisecure/postgresql
    tag: latest

  global:
    postgresql:
      auth:
        database: ocean
        password: password
        postgresPassword: password
        username: port_admin

lakehouseEnabled: false